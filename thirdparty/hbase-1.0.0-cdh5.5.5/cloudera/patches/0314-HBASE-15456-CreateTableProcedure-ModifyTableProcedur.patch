From 543ef2f93a7cf8c98cabca9f9a78919ad7ed4eb2 Mon Sep 17 00:00:00 2001
From: tedyu <yuzhihong@gmail.com>
Date: Fri, 18 Mar 2016 05:38:05 -0700
Subject: [PATCH 314/335] HBASE-15456
 CreateTableProcedure/ModifyTableProcedure needs to
 fail when there is no family in table descriptor
 (huaxiang sun)

Change-Id: Id5da9b65d9e01ad65c4dc4a7adfa02d1ff8f09c0
Reason: Improvement
Author: Huaxiang Sun
Ref: CDH-39237
---
 .../hbase/master/handler/CreateTableHandler.java   |    8 ++++++++
 .../hbase/master/handler/ModifyTableHandler.java   |    8 ++++++++
 .../apache/hadoop/hbase/regionserver/HRegion.java  |    7 +++++++
 .../org/apache/hadoop/hbase/client/TestAdmin2.java |    5 ++++-
 .../hbase/master/TestOpenedRegionHandler.java      |    2 ++
 .../handler/TestCloseRegionHandler.java            |    5 +++++
 .../handler/TestOpenRegionHandler.java             |    2 ++
 .../hadoop/hbase/thrift/TestThriftServer.java      |    2 +-
 8 files changed, 37 insertions(+), 2 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/CreateTableHandler.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/CreateTableHandler.java
index f9d0d24..4ff67b4 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/CreateTableHandler.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/CreateTableHandler.java
@@ -31,6 +31,7 @@ import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.CoordinatedStateException;
+import org.apache.hadoop.hbase.DoNotRetryIOException;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
@@ -92,6 +93,13 @@ public class CreateTableHandler extends EventHandler {
   public CreateTableHandler prepare()
       throws NotAllMetaRegionsOnlineException, TableExistsException, IOException {
     int timeout = conf.getInt("hbase.client.catalog.timeout", 10000);
+
+    // check that we have at least 1 CF
+    if (hTableDescriptor.getColumnFamilies().length == 0) {
+      throw new DoNotRetryIOException("Table " + hTableDescriptor.getTableName().toString() +
+          " should have at least one column family.");
+    }
+
     // Need hbase:meta availability to create a table
     try {
       if (server.getMetaTableLocator().waitMetaRegionLocation(
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ModifyTableHandler.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ModifyTableHandler.java
index baa8513..0493c32 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ModifyTableHandler.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/handler/ModifyTableHandler.java
@@ -25,6 +25,7 @@ import java.util.Set;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
+import org.apache.hadoop.hbase.DoNotRetryIOException;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
@@ -62,6 +63,13 @@ public class ModifyTableHandler extends TableEventHandler {
   @Override
   protected void prepareWithTableLock() throws IOException {
     super.prepareWithTableLock();
+
+    // check that we have at least 1 Cf
+    if (htd.getColumnFamilies().length == 0) {
+      throw new DoNotRetryIOException("Table " + htd.getTableName().toString() +
+          " should have at least one column family.");
+    }
+
     // Check operation is possible on the table in its current state
     // Also checks whether the table exists
     if (masterServices.getAssignmentManager().getTableStateManager()
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
index 92d1c90..8472175 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java
@@ -841,6 +841,13 @@ public class HRegion implements HeapSize, PropagatingConfigurationObserver { //
    * @throws IOException e
    */
   private long initialize(final CancelableProgressable reporter) throws IOException {
+
+    //Refuse to open the region if there is no column family in the table
+    if (htableDescriptor.getColumnFamilies().length == 0) {
+      throw new DoNotRetryIOException("Table " + htableDescriptor.getNameAsString() +
+          " should have at least one column family.");
+    }
+
     MonitoredTask status = TaskMonitor.get().createStatus("Initializing region " + this);
     long nextSeqId = -1;
     try {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin2.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin2.java
index f4739a7..1f964be 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin2.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin2.java
@@ -110,8 +110,11 @@ public class TestAdmin2 {
   @Test (timeout=300000)
   public void testCreateBadTables() throws IOException {
     String msg = null;
+    final HTableDescriptor metaDesc = new HTableDescriptor(TableName.META_TABLE_NAME);
+    metaDesc.addFamily(new HColumnDescriptor(HConstants.CATALOG_FAMILY));
+
     try {
-      this.admin.createTable(new HTableDescriptor(TableName.META_TABLE_NAME));
+      this.admin.createTable(metaDesc);
     } catch(TableExistsException e) {
       msg = e.toString();
     }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestOpenedRegionHandler.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestOpenedRegionHandler.java
index 4ae6b24..581c3e9 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestOpenedRegionHandler.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestOpenedRegionHandler.java
@@ -123,6 +123,8 @@ public class TestOpenedRegionHandler {
       final Server server = new MockServer(TEST_UTIL);
       HTableDescriptor htd = new HTableDescriptor(
           TableName.valueOf("testShouldNotCompeleteOpenedRegionSuccessfullyIfVersionMismatches"));
+      HColumnDescriptor fam = new HColumnDescriptor("fam");
+      htd.addFamily(fam);
       HRegionInfo hri = new HRegionInfo(htd.getTableName(),
           Bytes.toBytes(testIndex), Bytes.toBytes(testIndex + 1));
       region = HRegion.createHRegion(hri, TEST_UTIL.getDataTestDir(), TEST_UTIL.getConfiguration(), htd);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java
index 75d4b3d..7ffe4c6 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestCloseRegionHandler.java
@@ -29,6 +29,7 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
+import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.RegionTransition;
 import org.apache.hadoop.hbase.Server;
@@ -61,6 +62,10 @@ public class TestCloseRegionHandler {
   private final static HBaseTestingUtility HTU = HBaseTestingUtility.createLocalHTU();
   private static final HTableDescriptor TEST_HTD =
     new HTableDescriptor(TableName.valueOf("TestCloseRegionHandler"));
+  private static final HColumnDescriptor fam = new HColumnDescriptor("fam");
+  static {
+    TEST_HTD.addFamily(fam);
+  }
   private HRegionInfo TEST_HRI;
   private int testIndex = 0;
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java
index 8346787..ab9d57d 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/handler/TestOpenRegionHandler.java
@@ -60,6 +60,8 @@ public class TestOpenRegionHandler {
     HTU.getConfiguration().setBoolean("hbase.assignment.usezk", true);
     HTU.startMiniZKCluster();
     TEST_HTD = new HTableDescriptor(TableName.valueOf("TestOpenRegionHandler.java"));
+    HColumnDescriptor fam = new HColumnDescriptor("fam");
+    TEST_HTD.addFamily(fam);
   }
 
   @AfterClass public static void after() throws IOException {
diff --git a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java
index 5707cf8..cd011c3 100644
--- a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java
+++ b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java
@@ -272,7 +272,7 @@ public class TestThriftServer {
     assertEquals(handler.getTableNames().size(), 1);
     assertEquals(handler.getColumnDescriptors(tableAname).size(), 2);
     assertTrue(handler.isTableEnabled(tableAname));
-    handler.createTable(tableBname, new ArrayList<ColumnDescriptor>());
+    handler.createTable(tableBname, getColumnDescriptors());
     assertEquals(handler.getTableNames().size(), 2);
   }
 
-- 
1.7.9.5

