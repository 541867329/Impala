From 0ad81c7610996115be38254209eb52340aa76226 Mon Sep 17 00:00:00 2001
From: tedyu <yuzhihong@gmail.com>
Date: Mon, 2 Mar 2015 17:06:57 -0800
Subject: [PATCH 129/157] HBASE-13134 mutateRow and checkAndMutate apis don't
 throw region level exceptions (Francis Liu)

Reason: Bug
Author: Francis Liu
Ref: CDH-34537

Conflicts:
	hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java

Change-Id: I33e446ba9b0425ecde3ce02cfb00336b385c427e
Amending-Author: Andrew Purtell <apurtell@apache.org>
---
 .../org/apache/hadoop/hbase/client/HTable.java     |   23 +++++++++++++++++---
 .../hadoop/hbase/client/TestCheckAndMutate.java    |   16 +++++++++++++-
 .../hadoop/hbase/client/TestFromClientSide.java    |   11 ++++++++++
 3 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java
index dbe465e..9a8af09 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java
@@ -1022,9 +1022,17 @@ public class HTable implements HTableInterface {
           regionMutationBuilder.setAtomic(true);
           MultiRequest request =
             MultiRequest.newBuilder().addRegionAction(regionMutationBuilder.build()).build();
-          PayloadCarryingRpcController pcrc = rpcControllerFactory.newController();
-          pcrc.setPriority(tableName);
-          getStub().multi(pcrc, request);
+          PayloadCarryingRpcController controller = rpcControllerFactory.newController();
+          controller.setPriority(tableName);
+          ClientProtos.MultiResponse response = getStub().multi(controller, request);
+          ClientProtos.RegionActionResult res = response.getRegionActionResultList().get(0);
+          if (res.hasException()) {
+            Throwable ex = ProtobufUtil.toException(res.getException());
+            if(ex instanceof IOException) {
+              throw (IOException)ex;
+            }
+            throw new IOException("Failed to mutate row: "+Bytes.toStringBinary(rm.getRow()), ex);
+          }
         } catch (ServiceException se) {
           throw ProtobufUtil.getRemoteException(se);
         }
@@ -1233,6 +1241,15 @@ public class HTable implements HTableInterface {
                   getLocation().getRegionInfo().getRegionName(), row, family, qualifier,
                   new BinaryComparator(value), compareType, rm);
               ClientProtos.MultiResponse response = getStub().multi(controller, request);
+              ClientProtos.RegionActionResult res = response.getRegionActionResultList().get(0);
+              if (res.hasException()) {
+                Throwable ex = ProtobufUtil.toException(res.getException());
+                if(ex instanceof IOException) {
+                  throw (IOException)ex;
+                }
+                throw new IOException("Failed to checkAndMutate row: "+
+                    Bytes.toStringBinary(rm.getRow()), ex);
+              }
               return Boolean.valueOf(response.getProcessed());
             } catch (ServiceException se) {
               throw ProtobufUtil.getRemoteException(se);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCheckAndMutate.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCheckAndMutate.java
index 1203e1f..3205703 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCheckAndMutate.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestCheckAndMutate.java
@@ -22,6 +22,7 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.MediumTests;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.filter.CompareFilter;
+import org.apache.hadoop.hbase.regionserver.NoSuchColumnFamilyException;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -29,6 +30,7 @@ import org.junit.Test;
 import org.junit.experimental.categories.Category;
 
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 @Category(MediumTests.class)
 public class TestCheckAndMutate {
@@ -96,8 +98,20 @@ public class TestCheckAndMutate {
           Bytes.toString(result.getValue(family, Bytes.toBytes("B"))).equals("b"));
       assertTrue("Column C should not exist",
           result.getValue(family, Bytes.toBytes("C")) == null);
+
+      //Test that we get a region level exception
+      try {
+        Put p = new Put(rowKey);
+        p.add(new byte[]{'b', 'o', 'g', 'u', 's'}, new byte[]{'A'},  new byte[0]);
+        rm = new RowMutations(rowKey);
+        rm.add(p);
+        table.checkAndMutate(rowKey, family, Bytes.toBytes("A"), CompareFilter.CompareOp.EQUAL,
+            Bytes.toBytes("a"), rm);
+        fail("Expected NoSuchColumnFamilyException");
+      } catch(NoSuchColumnFamilyException e) {
+      }
     } finally {
       table.close();
     }
   }
-}
\ No newline at end of file
+}
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
index 7a44e5a..4182926 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java
@@ -4485,6 +4485,17 @@ public class TestFromClientSide {
     r = t.get(g);
     assertEquals(0, Bytes.compareTo(VALUE, r.getValue(FAMILY, QUALIFIERS[1])));
     assertNull(r.getValue(FAMILY, QUALIFIERS[0]));
+
+    //Test that we get a region level exception
+    try {
+      arm = new RowMutations(ROW);
+      p = new Put(ROW);
+      p.add(new byte[]{'b', 'o', 'g', 'u', 's'}, QUALIFIERS[0], VALUE);
+      arm.add(p);
+      t.mutateRow(arm);
+      fail("Expected NoSuchColumnFamilyException");
+    } catch(NoSuchColumnFamilyException e) {
+    }
   }
 
   @Test
-- 
1.7.9.5

