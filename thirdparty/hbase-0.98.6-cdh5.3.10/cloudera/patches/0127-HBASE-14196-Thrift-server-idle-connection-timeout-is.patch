From ec89bcc0ad9467a4718e586ec3e37c09cf8d925c Mon Sep 17 00:00:00 2001
From: Andrew Purtell <apurtell@apache.org>
Date: Wed, 12 Aug 2015 16:32:37 -0700
Subject: [PATCH 127/157] HBASE-14196 Thrift server idle connection timeout
 issue (Vladimir Rodionov) HBASE-14533 Thrift client
 gets "AsyncProcess: Failed to get region location
 .... closed"

The first issue above fixes CDH-32365. The second adds a test against regression.

Reason: Bug
Author: stack
Ref: CDH-32365
---
 .../apache/hadoop/hbase/util/ConnectionCache.java  |    9 +-
 .../hadoop/hbase/thrift/IncrementCoalescer.java    |    8 +-
 .../hadoop/hbase/thrift/ThriftServerRunner.java    |  148 +++++++++++++++-----
 .../hadoop/hbase/thrift/TestThriftServer.java      |   38 +++++
 4 files changed, 164 insertions(+), 39 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ConnectionCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ConnectionCache.java
index 5f2a9f1..191555f 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ConnectionCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ConnectionCache.java
@@ -101,6 +101,13 @@ public class ConnectionCache {
   }
 
   /**
+   * @return Total count of currently cached connections.
+   */
+  public int getConnectionCount() {
+    return this.connections.size();
+  }
+
+  /**
    * Set the current thread local effective user
    */
   public void setEffectiveUser(String user) {
@@ -208,4 +215,4 @@ public class ConnectionCache {
       return false;
     }
   }
-}
+}
\ No newline at end of file
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/IncrementCoalescer.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/IncrementCoalescer.java
index bb45c88..8ded785 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/IncrementCoalescer.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/IncrementCoalescer.java
@@ -264,8 +264,9 @@ public class IncrementCoalescer implements IncrementCoalescerMBean {
           if (counter == null) {
             continue;
           }
+          HTable table = null;
           try {
-            HTable table = handler.getTable(row.getTable());
+            table = handler.getTable(row.getTable());
             if (failures > 2) {
               throw new IOException("Auto-Fail rest of ICVs");
             }
@@ -278,8 +279,11 @@ public class IncrementCoalescer implements IncrementCoalescerMBean {
                 + Bytes.toStringBinary(row.getRowKey()) + ", "
                 + Bytes.toStringBinary(row.getFamily()) + ", "
                 + Bytes.toStringBinary(row.getQualifier()) + ", " + counter, e);
+          } finally{
+            if(table != null){
+              table.close();
+            }
           }
-
         }
         return failures;
       }
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java
index 52a178e..0da6f51 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift/ThriftServerRunner.java
@@ -117,7 +117,9 @@ import org.apache.thrift.transport.TServerSocket;
 import org.apache.thrift.transport.TServerTransport;
 import org.apache.thrift.transport.TTransportFactory;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Joiner;
+import com.google.common.base.Throwables;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 
 /**
@@ -539,15 +541,8 @@ public class ThriftServerRunner implements Runnable {
     protected HashMap<Integer, ResultScannerWrapper> scannerMap = null;
     private ThriftMetrics metrics = null;
 
-    private final ConnectionCache connectionCache;
-
-    private static ThreadLocal<Map<String, HTable>> threadLocalTables =
-        new ThreadLocal<Map<String, HTable>>() {
-      @Override
-      protected Map<String, HTable> initialValue() {
-        return new TreeMap<String, HTable>();
-      }
-    };
+    @VisibleForTesting
+    final ConnectionCache connectionCache;
 
     IncrementCoalescer coalescer = null;
 
@@ -582,11 +577,7 @@ public class ThriftServerRunner implements Runnable {
     public HTable getTable(final byte[] tableName) throws
         IOException {
       String table = Bytes.toString(tableName);
-      Map<String, HTable> tables = threadLocalTables.get();
-      if (!tables.containsKey(table)) {
-        tables.put(table, (HTable)connectionCache.getTable(table));
-      }
-      return tables.get(table);
+      return (HTable)connectionCache.getTable(table);
     }
 
     public HTable getTable(final ByteBuffer tableName) throws IOException {
@@ -636,8 +627,7 @@ public class ThriftServerRunner implements Runnable {
 
       int cleanInterval = conf.getInt(CLEANUP_INTERVAL, 10 * 1000);
       int maxIdleTime = conf.getInt(MAX_IDLETIME, 10 * 60 * 1000);
-      connectionCache = new ConnectionCache(
-        conf, userProvider, cleanInterval, maxIdleTime);
+      connectionCache = new ConnectionCache(conf, userProvider, cleanInterval, maxIdleTime);
     }
 
     /**
@@ -727,8 +717,8 @@ public class ThriftServerRunner implements Runnable {
     @Override
     public List<TRegionInfo> getTableRegions(ByteBuffer tableName)
     throws IOError {
+      HTable table = null;
       try {
-        HTable table;
         try {
           table = getTable(tableName);
         } catch (TableNotFoundException ex) {
@@ -759,6 +749,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e){
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
@@ -790,8 +782,9 @@ public class ThriftServerRunner implements Runnable {
                               byte[] family,
                               byte[] qualifier,
                               Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Get get = new Get(getBytes(row));
         addAttributes(get, attributes);
         if (qualifier == null) {
@@ -804,6 +797,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
@@ -832,8 +827,10 @@ public class ThriftServerRunner implements Runnable {
      */
     public List<TCell> getVer(ByteBuffer tableName, ByteBuffer row, byte[] family,
         byte[] qualifier, int numVersions, Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Get get = new Get(getBytes(row));
         addAttributes(get, attributes);
         if (null == qualifier) {
@@ -847,6 +844,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -875,8 +874,10 @@ public class ThriftServerRunner implements Runnable {
     protected List<TCell> getVerTs(ByteBuffer tableName, ByteBuffer row, byte[] family,
         byte[] qualifier, long timestamp, int numVersions, Map<ByteBuffer, ByteBuffer> attributes)
         throws IOError {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Get get = new Get(getBytes(row));
         addAttributes(get, attributes);
         if (null == qualifier) {
@@ -891,6 +892,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -923,8 +926,10 @@ public class ThriftServerRunner implements Runnable {
     public List<TRowResult> getRowWithColumnsTs(
         ByteBuffer tableName, ByteBuffer row, List<ByteBuffer> columns,
         long timestamp, Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         if (columns == null) {
           Get get = new Get(getBytes(row));
           addAttributes(get, attributes);
@@ -948,6 +953,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -985,9 +992,11 @@ public class ThriftServerRunner implements Runnable {
                                                  List<ByteBuffer> rows,
         List<ByteBuffer> columns, long timestamp,
         Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      
+      HTable table= null;
       try {
         List<Get> gets = new ArrayList<Get>(rows.size());
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         if (metrics != null) {
           metrics.incNumRowKeysInBatchGet(rows.size());
         }
@@ -1013,6 +1022,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1030,8 +1041,9 @@ public class ThriftServerRunner implements Runnable {
                             ByteBuffer row,
                             ByteBuffer column,
         long timestamp, Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Delete delete  = new Delete(getBytes(row));
         addAttributes(delete, attributes);
         byte [][] famAndQf = KeyValue.parseColumn(getBytes(column));
@@ -1045,6 +1057,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
@@ -1059,14 +1073,17 @@ public class ThriftServerRunner implements Runnable {
     public void deleteAllRowTs(
         ByteBuffer tableName, ByteBuffer row, long timestamp,
         Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Delete delete  = new Delete(getBytes(row), timestamp);
         addAttributes(delete, attributes);
         table.delete(delete);
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
@@ -1169,6 +1186,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IllegalArgumentException e) {
         LOG.warn(e.getMessage(), e);
         throw new IllegalArgument(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1240,6 +1259,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IllegalArgumentException e) {
         LOG.warn(e.getMessage(), e);
         throw new IllegalArgument(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1258,7 +1279,7 @@ public class ThriftServerRunner implements Runnable {
     protected long atomicIncrement(ByteBuffer tableName, ByteBuffer row,
         byte [] family, byte [] qualifier, long amount)
         throws IOError, IllegalArgument, TException {
-      HTable table;
+      HTable table = null;
       try {
         table = getTable(tableName);
         return table.incrementColumnValue(
@@ -1266,6 +1287,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
@@ -1315,8 +1338,10 @@ public class ThriftServerRunner implements Runnable {
     public int scannerOpenWithScan(ByteBuffer tableName, TScan tScan,
         Map<ByteBuffer, ByteBuffer> attributes)
         throws IOError {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Scan scan = new Scan();
         addAttributes(scan, attributes);
         if (tScan.isSetStartRow()) {
@@ -1353,6 +1378,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1360,8 +1387,10 @@ public class ThriftServerRunner implements Runnable {
     public int scannerOpen(ByteBuffer tableName, ByteBuffer startRow,
         List<ByteBuffer> columns,
         Map<ByteBuffer, ByteBuffer> attributes) throws IOError {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Scan scan = new Scan(getBytes(startRow));
         addAttributes(scan, attributes);
         if(columns != null && columns.size() != 0) {
@@ -1378,6 +1407,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1386,8 +1417,10 @@ public class ThriftServerRunner implements Runnable {
         ByteBuffer stopRow, List<ByteBuffer> columns,
         Map<ByteBuffer, ByteBuffer> attributes)
         throws IOError, TException {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Scan scan = new Scan(getBytes(startRow), getBytes(stopRow));
         addAttributes(scan, attributes);
         if(columns != null && columns.size() != 0) {
@@ -1404,6 +1437,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1413,8 +1448,10 @@ public class ThriftServerRunner implements Runnable {
                                      List<ByteBuffer> columns,
         Map<ByteBuffer, ByteBuffer> attributes)
         throws IOError, TException {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Scan scan = new Scan(getBytes(startAndPrefix));
         addAttributes(scan, attributes);
         Filter f = new WhileMatchFilter(
@@ -1434,6 +1471,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1441,8 +1480,10 @@ public class ThriftServerRunner implements Runnable {
     public int scannerOpenTs(ByteBuffer tableName, ByteBuffer startRow,
         List<ByteBuffer> columns, long timestamp,
         Map<ByteBuffer, ByteBuffer> attributes) throws IOError, TException {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Scan scan = new Scan(getBytes(startRow));
         addAttributes(scan, attributes);
         scan.setTimeRange(0, timestamp);
@@ -1460,6 +1501,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1468,8 +1511,10 @@ public class ThriftServerRunner implements Runnable {
         ByteBuffer stopRow, List<ByteBuffer> columns, long timestamp,
         Map<ByteBuffer, ByteBuffer> attributes)
         throws IOError, TException {
+      
+      HTable table = null;
       try {
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         Scan scan = new Scan(getBytes(startRow), getBytes(stopRow));
         addAttributes(scan, attributes);
         scan.setTimeRange(0, timestamp);
@@ -1488,17 +1533,21 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
     @Override
     public Map<ByteBuffer, ColumnDescriptor> getColumnDescriptors(
         ByteBuffer tableName) throws IOError, TException {
+      
+      HTable table = null;
       try {
         TreeMap<ByteBuffer, ColumnDescriptor> columns =
           new TreeMap<ByteBuffer, ColumnDescriptor>();
 
-        HTable table = getTable(tableName);
+        table = getTable(tableName);
         HTableDescriptor desc = table.getTableDescriptor();
 
         for (HColumnDescriptor e : desc.getFamilies()) {
@@ -1509,26 +1558,43 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
     @Override
     public List<TCell> getRowOrBefore(ByteBuffer tableName, ByteBuffer row,
         ByteBuffer family) throws IOError {
+      HTable table = null;
       try {
-        HTable table = getTable(getBytes(tableName));
+        table = getTable(getBytes(tableName));
         Result result = table.getRowOrBefore(getBytes(row), getBytes(family));
         return ThriftUtilities.cellFromHBase(result.rawCells());
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
+    private void closeTable(HTable table) throws IOError {
+      try {
+        if(table != null){
+          table.close();
+        }
+      } catch (IOException e){
+        LOG.error(e.getMessage(), e);
+        throw new IOError(Throwables.getStackTraceAsString(e));
+      }
+    }
+     
     @Override
     public TRegionInfo getRegionInfo(ByteBuffer searchRow) throws IOError {
+      HTable table = null;
       try {
-        HTable table = getTable(TableName.META_TABLE_NAME.getName());
+        table = getTable(TableName.META_TABLE_NAME.getName());
         byte[] row = getBytes(searchRow);
         Result startRowResult = table.getRowOrBefore(
           row, HConstants.CATALOG_FAMILY);
@@ -1562,6 +1628,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
 
@@ -1581,13 +1649,16 @@ public class ThriftServerRunner implements Runnable {
         return;
       }
 
+      HTable table = null;
       try {
-        HTable table = getTable(tincrement.getTable());
+        table = getTable(tincrement.getTable());
         Increment inc = ThriftUtilities.incrementFromThrift(tincrement);
         table.increment(inc);
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+        closeTable(table);
       }
     }
 
@@ -1608,14 +1679,17 @@ public class ThriftServerRunner implements Runnable {
         throw new TException("Must supply a table and a row key; can't append");
       }
 
+      HTable table = null;
       try {
-        HTable table = getTable(tappend.getTable());
+        table = getTable(tappend.getTable());
         Append append = ThriftUtilities.appendFromThrift(tappend);
         Result result = table.append(append);
         return ThriftUtilities.cellFromHBase(result.rawCells());
       } catch (IOException e) {
         LOG.warn(e.getMessage(), e);
         throw new IOError(e.getMessage());
+      } finally{
+          closeTable(table);
       }
     }
 
@@ -1651,6 +1725,8 @@ public class ThriftServerRunner implements Runnable {
       } catch (IllegalArgumentException e) {
         LOG.warn(e.getMessage(), e);
         throw new IllegalArgument(e.getMessage());
+      } finally {
+        closeTable(table);
       }
     }
   }
diff --git a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java
index aeb1dd9..70c6f7e 100644
--- a/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java
+++ b/hbase-thrift/src/test/java/org/apache/hadoop/hbase/thrift/TestThriftServer.java
@@ -42,10 +42,12 @@ import org.apache.hadoop.hbase.filter.ParseFilter;
 import org.apache.hadoop.hbase.security.UserProvider;
 import org.apache.hadoop.hbase.test.MetricsAssertHelper;
 import org.apache.hadoop.hbase.thrift.ThriftServerRunner.HBaseHandler;
+import org.apache.hadoop.hbase.thrift.generated.AlreadyExists;
 import org.apache.hadoop.hbase.thrift.generated.BatchMutation;
 import org.apache.hadoop.hbase.thrift.generated.ColumnDescriptor;
 import org.apache.hadoop.hbase.thrift.generated.Hbase;
 import org.apache.hadoop.hbase.thrift.generated.IOError;
+import org.apache.hadoop.hbase.thrift.generated.IllegalArgument;
 import org.apache.hadoop.hbase.thrift.generated.Mutation;
 import org.apache.hadoop.hbase.thrift.generated.TAppend;
 import org.apache.hadoop.hbase.thrift.generated.TCell;
@@ -93,8 +95,15 @@ public class TestThriftServer {
   private static ByteBuffer valueDname = asByteBuffer("valueD");
   private static ByteBuffer valueEname = asByteBuffer(100l);
 
+  private static int CONNECTION_IDLE_TIME = 1000;
+  private static int RUN_CLEANER_INTERVAL = 1000;
+
   @BeforeClass
   public static void beforeClass() throws Exception {
+    UTIL.getConfiguration().setInt(ThriftServerRunner.HBaseHandler.MAX_IDLETIME,
+        CONNECTION_IDLE_TIME);
+    UTIL.getConfiguration().setInt(ThriftServerRunner.HBaseHandler.CLEANUP_INTERVAL,
+        RUN_CLEANER_INTERVAL);
     UTIL.getConfiguration().setBoolean(ThriftServerRunner.COALESCE_INC_KEY, true);
     UTIL.startMiniCluster();
   }
@@ -104,6 +113,35 @@ public class TestThriftServer {
     UTIL.shutdownMiniCluster();
   }
 
+  @Test(timeout=30000)
+  public void testConnectionCache()
+  throws IOException, IOError, IllegalArgument, AlreadyExists, InterruptedException {
+    ThriftServerRunner.HBaseHandler handler =
+        new ThriftServerRunner.HBaseHandler(UTIL.getConfiguration(),
+            UserProvider.instantiate(UTIL.getConfiguration()));
+    final ByteBuffer tn = asByteBuffer("tn");
+    handler.createTable(tn, getColumnDescriptors());
+    List<Mutation> mutations = new ArrayList<Mutation>(1);
+    mutations.add(new Mutation(false, columnAAname, valueEname, true));
+    final int count = 10;
+    for (int i = 0; i < count; i++) {
+      try {
+        if (i > 1) {
+          // Sleep until count of connections is zero... because idle one got cleaned up.
+          while (handler.connectionCache.getConnectionCount() > 0) {
+            Threads.sleep(CONNECTION_IDLE_TIME);
+          }
+        }
+        handler.mutateRow(tn, rowAname, mutations, null);
+        LOG.info("Mutate " + i);
+      } catch (IOError e) {
+        throw new RuntimeException(e);
+      } catch (IllegalArgument e) {
+        throw new RuntimeException(e);
+      }
+    }
+  }
+
   /**
    * Runs all of the tests under a single JUnit test method.  We
    * consolidate all testing to one method because HBaseClusterTestCase
-- 
1.7.9.5

